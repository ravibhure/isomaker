#!/usr/bin/env bash

# file names & paths
tmp="/tmp"  # destination folder to store the final iso file
hostname="ubuntu"
mypath="$( dirname ${BASH_SOURCE[0]} )" # source folder where isomaker is running
currentuser="$( whoami)"

if [[ $mypath == '.' ]] ; then
  mypath=$PWD
fi

# define spinner function for slow tasks
# courtesy of http://fitnr.com/showing-a-bash-spinner.html
spinner()
{
    local pid=$1
    local delay=0.75
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

# define download function
# courtesy of http://fitnr.com/showing-file-download-progress-using-wget.html
download()
{
    local url=$1
    echo -n "    "
    wget --progress=dot $url 2>&1 | grep --line-buffered "%" | \
        sed -u -e "s,\.,,g" | awk '{printf("\b\b\b\b%4s", $2)}'
    echo -ne "\b\b\b\b"
    echo " DONE"
}

# define function to check if program is installed
# courtesy of https://gist.github.com/JamieMason/4761049
function program_is_installed {
    # set to 1 initially
    local return_=1
    # set to 0 if not found
    type $1 >/dev/null 2>&1 || { local return_=0; }
    # return value
    echo $return_
}

# define disk size to partition while installation
disk_part()
{
    while true; do
        echo
        echo " >>> which disk size would you like to setup:"
        echo
        echo "  [1] 100GB Partition"
        echo "  [2] 600GB Partition"
        echo
        read -p " please enter your preference: [1|2]: " osdisk
        case $osdisk in
            [1]* )  seed_file="ubuntu_100.seed"		# filename of the seed to be downloaded
		    size_name="100gb"			# sizename to set in out file
                    break;;
            [2]* )  seed_file="ubuntu_600.seed"		# filename of the seed to be downloaded
		    size_name="600gb"			# sizename to set in out file
                    break;;
            * ) echo " please answer [1] or [2]";;
        esac
    done
}

# print a pretty header
echo
echo " +---------------------------------------------------+"
echo " |            UNATTENDED ISO MAKER            |"
echo " +---------------------------------------------------+"
echo

# ask if script runs without sudo or root priveleges
if [ $currentuser != "root" ]; then
    echo " you run this without sudo privileges or not as root"
    exit 1
fi

#get the latest versions of Ubuntu LTS

tmphtml=$tmp/tmphtml
rm $tmphtml >/dev/null 2>&1
wget -O $tmphtml 'http://releases.ubuntu.com/' >/dev/null 2>&1

prec=$(fgrep Precise $tmphtml | head -1 | awk '{print $3}')
trus=$(fgrep Trusty $tmphtml | head -1 | awk '{print $3}')
#xenn=$(fgrep Xenial $tmphtml | head -1 | awk '{print $3}')


# ask whether to include vmware tools or not
# for dynamically fetch the current version of LTS
# curl -s http://releases.ubuntu.com/12.04/ | grep -i 'standard download' | grep 'for 64-bit' | grep 'Server install' | cut -d'=' -f6 | cut -d'>' -f1
# curl -s http://releases.ubuntu.com/14.04/ | grep -i 'standard download' | grep 'for 64-bit' | grep 'Server install' | cut -d'=' -f6 | cut -d'>' -f1
while true; do
    echo " >>> which ubuntu edition would you like to remaster:"
    echo
    echo "  [1] Ubuntu $prec LTS Server amd64 - Precise Pangolin"
    echo "  [2] Ubuntu $trus LTS Server amd64 - Trusty Tahr"
    echo
    read -p " please enter your preference: [1|2]: " ubver
    case $ubver in
        [1]* )  disk_part
		download_file="ubuntu-$prec-server-amd64.iso"           # filename of the iso to be downloaded
                download_location="http://releases.ubuntu.com/$prec/"     # location of the file to be downloaded
                new_iso_name="ubuntu-$prec-server-amd64-${size_name}.iso" # filename of the new iso file to be created
                break;;
        [2]* )  disk_part
		download_file="ubuntu-$trus-server-amd64.iso"             # filename of the iso to be downloaded
                download_location="http://releases.ubuntu.com/$trus/"     # location of the file to be downloaded
                new_iso_name="ubuntu-$trus-server-amd64-${size_name}.iso"   # filename of the new iso file to be created
                break;;
        * ) echo " please answer [1] or [2]";;
    esac
done

# ask the user questions about his/her preferences
read -ep " please enter your preferred timezone: " -i "US/Pacific" timezone
read -ep " please enter your automation provisioner (ansible, chef, puppet): " -i "ansible" provisioner
read -ep " please enter your preferred username: " -i "ubuntu" username
read -sp " please enter your preferred password (default:- ubuntu): " password
printf "\n"
if [[ "$password" != "" ]]; then
    read -sp " confirm your preferred password: " password2
    printf "\n"

    # check if the passwords match to prevent headaches
    if [[ "$password" != "$password2" ]]; then
        echo " your passwords do not match; please restart the script and try again"
        echo
        exit
    fi
else
    password="ubuntu"
fi

# download the ubunto iso
cd $tmp
if [[ ! -f $tmp/$download_file ]]; then
    echo -n " $download_file not found in $tmp: "
    read -r -p "Do you wants to download it? [y/N] " response
    if [[ ${response,,} =~ ^(yes|y)$ ]] ;then
        echo -n " downloading $download_file: "
        download "$download_location$download_file"
    else
        echo " Thank You! Please re-run once you are available installable os ISO"
        exit 1
    fi
fi

# download ubuntu seed file
if [[ ! -f $tmp/$seed_file ]]; then
    if [[ -f $mypath/$seed_file ]]; then
        cp -f $mypath/$seed_file $tmp/ ;
    else
        echo -h " downloading $seed_file: "
        download "https://github.com/ravibhure/isomaker/raw/master/$seed_file"
    fi
fi

# download ubuntu hostname file
if [[ ! -f $tmp/hostname ]]; then
    if [[ -f $mypath/hostname ]]; then
        cp -f $mypath/hostname $tmp/ ;
    else
        echo -h " downloading hostname: "
        download "https://github.com/ravibhure/isomaker/raw/master/hostname"
    fi
fi

# download ubuntu post install script
if [[ ! -f $tmp/setup.sh ]]; then
    if [[ -f $mypath/setup.sh ]]; then
        cp -f $mypath/setup.sh $tmp/ ;
    else
        echo -h " downloading post install setup.sh: "
        download "https://github.com/ravibhure/isomaker/raw/master/setup.sh"
    fi
fi

# install required packages
echo " installing required packages"
if [ $(program_is_installed "mkpasswd") -eq 0 ] || [ $(program_is_installed "mkisofs") -eq 0 ]; then
    (apt-get -y update > /dev/null 2>&1) &
    spinner $!
    (apt-get -y install whois genisoimage > /dev/null 2>&1) &
    spinner $!
fi

# create working folders
echo " remastering your iso file"
mkdir -p $tmp
mkdir -p $tmp/iso_org
mkdir -p $tmp/iso_new

# mount the image
if grep -qs $tmp/iso_org /proc/mounts ; then
    echo " image is already mounted, continue"
else
    (mount -o loop $tmp/$download_file $tmp/iso_org > /dev/null 2>&1)
fi

# copy the iso contents to the working directory
(cp -rT $tmp/iso_org $tmp/iso_new > /dev/null 2>&1) &
spinner $!

# set the language for the installation menu
cd $tmp/iso_new
echo en > $tmp/iso_new/isolinux/lang

# set late command
late_command="cp /cdrom/hostname /target/etc/dhcp/dhclient-exit-hooks.d/hostname; \
cp /cdrom/setup.sh /target/tmp/setup.sh ; \
sed -i 's/%sudo\tALL=(ALL:ALL) ALL/%sudo\tALL=(ALL:ALL) NOPASSWD:ALL/' /target/etc/sudoers ; \
in-target /bin/bash /tmp/setup.sh"

# copy the ubuntu seed file to the iso
cp -rT $tmp/$seed_file $tmp/iso_new/preseed/$seed_file

# Configure hostname, hangup with dhcp
cp -rT $tmp/hostname $tmp/iso_new/hostname

# Post Installation script to be place
cp -rT $tmp/setup.sh $tmp/iso_new/setup.sh

# include firstrun script
echo "
# setup firstrun script
d-i preseed/late_command                                    string      $late_command" >> $tmp/iso_new/preseed/$seed_file

# generate the password hash
pwhash=$(echo $password | mkpasswd -s -m sha-512)

# update the seed file to reflect the users' choices
# the normal separator for sed is /, but both the password and the timezone may contain it
# so instead, I am using @
sed -i "s@{{username}}@$username@g" $tmp/iso_new/preseed/$seed_file
sed -i "s@{{pwhash}}@$pwhash@g" $tmp/iso_new/preseed/$seed_file
sed -i "s@{{hostname}}@$hostname@g" $tmp/iso_new/preseed/$seed_file
sed -i "s@{{timezone}}@$timezone@g" $tmp/iso_new/preseed/$seed_file
# update the setup file to reflect the users' choices for repository server
sed -i "s@{{provisioner}}@$provisioner@g" $tmp/iso_new/setup.sh

# calculate checksum for seed file
seed_checksum=$(md5sum $tmp/iso_new/preseed/$seed_file)

#cp -r $tmp/iso_new/preseed/$seed_file $tmp/ravibhure.cfg

# add the autoinstall option to the menu
sed -i "/label install/ilabel autoinstall\n\
  menu label ^Autoinstall Ubuntu Server\n\
  kernel /install/vmlinuz\n\
  append file=/cdrom/preseed/ubuntu-server.seed initrd=/install/initrd.gz auto=true priority=high preseed/file=/cdrom/preseed/$seed_file preseed/file/checksum=$seed_checksum --" $tmp/iso_new/isolinux/txt.cfg

# Don't wait for user confirmation
sed -i 's/^timeout.*/timeout 1/g' $tmp/iso_new/isolinux/isolinux.cfg

echo " creating the remastered iso"
cd $tmp/iso_new
(mkisofs -D -r -V "UBUNTU_SERVER" -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o $tmp/$new_iso_name . > /dev/null 2>&1) &
spinner $!

# cleanup
umount $tmp/iso_org
rm -rf $tmp/iso_new
rm -rf $tmp/iso_org

# print info to user
echo
echo " -----"
echo " finished remastering your ubuntu iso file"
echo " the new file is located at: $tmp/$new_iso_name"
echo " your username is: $username"
echo " your password is: $password"
echo " your timezone is: $timezone"
echo

# unset vars
unset username
unset password
unset hostname
unset timezone
unset pwhash
unset download_file
unset download_location
unset new_iso_name
unset tmp
unset seed_file
